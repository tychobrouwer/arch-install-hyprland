;; Bar Widget
(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (music)
    (right)))

(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end"
    (button
      :onclick "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
      (box
        :class {mutedmic == "true" ? "mutedmic" : "unmutedmic"}
      {mutedmic == "true" ? "" : ""})
    )
    (metric
      :class {
      volume == "" ? "volume0"
      : volume == 0 ? "volume0"
      : volume < 25 ? "volume25"
      : volume < 50 ? "volume50"
      : volume < 75 ? "volume75"
      : "volume100"
      }
      :label {volume == "" ? "" : volume == 0 ? " ": volume < 25 ? "" : volume < 50 ? "" : volume < 75 ? "" : ""}
      :value volume
      :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}% --limit 1.0"
      :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    )
    (metric
      :class ""
      :label ""
      :value {EWW_RAM.used_mem_perc}
      :onchange ""
      :onclick ""
    )
    (metric
      :class ""
      :label "💾"
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
      :onchange ""
      :onclick ""
    )
    (power)
  ))

(defwidget left []
  (box :class "left" :orientation "h" :space-evenly false :halign "start"
    (workspaces)
    (box :class "time" time)
  ))


;; Workspaces
(defwidget workspaces []
  (box :class "workspaces"
    :orientation "h"
    :space-evenly true
    :spacing 10
    (for i in workspaces
      (button :class {activeworkspace == i ? "activeworkspace" : ""}
        :onclick "hyprctl dispatch focusworkspaceoncurrentmonitor ${i}"
        ""
      )
    )
  )
)

;; Music Bar
(defwidget music []
  (eventbox :class "music ${UPDATE}"
    :halign "center"
    :onclick "eww open music_widget --toggle --screen 0"
    {SUMMARY != "" ? "${SUMMARY}" : ""}
  ))

;; Power
(defwidget power []
  (eventbox	:onhover "eww update power=true"
    :onhoverlost "eww update power=false"
    (box		:orientation "h"
      :space-evenly "false"
      :hexpand "false"
      :class "powermenu"
      (revealer	:transition "slideleft"
        :reveal power
        :duration "550ms"
        (box		:orientation "h"
          :space-evenly "false"
          
          (button :class "button-suspend"
          :onclick "eww open power-confirm && eww update confirm_action='systemctl suspend'" "" )
          
          (button :class "button-reboot"
          :onclick "eww open power-confirm && eww update confirm_action='systemctl reboot'"	"")
          
          (button :class "button-logout"
          :onclick "hyprctl dispatch exit" "")
          
          (button :class "button-lock"
          :onclick "hyprlock"	"")))
      
      (button		:class "button-off"
      :onclick "eww open power-confirm && eww update confirm_action='shutdown now'"	""))))

;; Metric Template
(defwidget metric [class label value onchange onclick]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (eventbox
      :onclick onclick
      (box :class class label))
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value {value != "" ? value : 0}
      :onchange onchange
    )))

;; Music Widget
(defwidget music_widget []
  (box :class "music_window ${UPDATE}" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
    (box :orientation "v" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "true"
      (label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
      (label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
      (box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
        (button :class "btn_prev" :timeout "1s" :onclick "playerctl previous" "")
        (button :class "btn_play" :timeout "1s" :onclick "playerctl play-pause" STATUS)
        (button :class "btn_next" :timeout "1s" :onclick "playerctl next" ""))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false"
        (scale :min 0 :active "true" :max 100 :value {CURRENT != "" ? CURRENT : 0})))))

;; Confirmation Widget
(defwidget confirmation []
  (box :orientation "v" :class "confirm-box" "Are you sure?"
    (box :orientation "h"
      (button :class "confirm-yes"
        :onclick "eww close power-confirm && sh -c $confirm_action"
      "✔ Yes")
      (button :class "confirm-no"
        :onclick "eww close power-confirm"
      "✖ No"))))

;; Confirm action command
(defvar confirm_action "")

;; Power menu visibility
(defvar power false)

;; Music vars
(defpoll UPDATE :interval "0.5s" "scripts/music-info.sh --update")
(defpoll SONG :interval "0.5s" "scripts/music-info.sh --song")
(defpoll ARTIST :interval "0.5s" "scripts/music-info.sh --artist")
(defpoll STATUS :interval "0.5s" "scripts/music-info.sh --status")
(defpoll SUMMARY :interval "0.5s" "scripts/music-info.sh --summary")
(defpoll CURRENT :interval "1s" "scripts/music-info.sh --time")
(defpoll COVER :interval "0.5s" "scripts/music-info.sh --cover")

(defpoll volume :interval "0.1s"
"scripts/get-volume.sh")

(defpoll mutedmic :interval "0.1s"
"scripts/get-mute.sh")

(defpoll activeworkspace :interval "0.1s"
  "hyprctl activeworkspace | awk -F '[()]' '{print $2}' | xargs")

(defpoll time :interval "10s"
"date '+%d %b %Y  %H:%M'")

(defvar workspaces "[1, 2, 3, 4, 5, 6, 7]")

(defwindow bar
  :monitor 0
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  (bar))

;; music
(defwindow music_widget
  :monitor 0
  :stacking "fg"
  :focusable false
  :geometry (geometry :x "50%" :y 5 :anchor "top center")
  (music_widget))

;; confirmation
(defwindow confirmation
  :monitor 0
  :stacking "fg"
  :focusable false
  :geometry (geometry :x "50%" :y 5 :anchor "top center")
  (confirmation))
